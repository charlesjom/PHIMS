- medication = medication.present? ? medication : nil
.ui.segment
    .remove_attribute
        Remove
        %i.close.icon
    = fields_for 'medical_history[medications_attributes][]', @model do |m|
        .fields
            .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:medicine_name].any? )}
                = m.label :medicine_name do
                    = I18n.t(:medicine_name, scope: [:labels, :medical_history, :medication])
                = m.text_field :medicine_name, placeholder: 'Medicine Name', value: medication.try(:medicine_name)
                - if medication.try(:errors).present? && medication.errors[:medicine_name].any?
                    .ui.red.pointing.above.label.error
                        = medication.errors[:medicine_name].first
            .field.required{ class: ("error" if medication.try(:errors).present? && medication.errors[:still_active].any?) }
                .ui.toggle.checkbox
                    = m.check_box :still_active, { value: medication.try(:still_active), class: "required" }, "true", "false"
                    = m.label :still_active do
                        = I18n.t(:still_active, scope: [:labels, :medical_history, :medication])
                - if medication.try(:errors).present? && medication.errors[:still_active].any?
                    .ui.red.pointing.above.label.error
                        = medication.errors[:still_active].first
        .fields
            .inline.field.required
                %label Dose
                .fields
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_dose_amount].any? )}
                        = m.number_field :dosage_dose_amount, placeholder: 'Amount', value: medication.try(:dosage_dose_amount)
                        - if medication.try(:errors).present? && medication.errors[:dosage_dose_amount].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_dose_amount].first
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_dose_unit].any? )}
                        = m.select :dosage_dose_unit, Medication::DOSE_UNITS, { prompt: "Select Unit..." , selected: medication.try(:dosage_dose_unit)}
                        - if medication.try(:errors).present? && medication.errors[:dosage_dose_unit].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_dose_unit].first
            .inline.field.required
                %label Frequency
                .fields
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_frequency_value].any? )}
                        = m.number_field :dosage_frequency_value, placeholder: 'Value', value: medication.try(:dosage_frequency_value)
                        - if medication.try(:errors).present? && medication.errors[:dosage_frequency_value].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_frequency_value].first
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_frequency_unit].any? )}
                        = m.select :dosage_frequency_unit, Medication::FREQUENCY_UNITS, { prompt: "Select Unit...", selected: medication.try(:dosage_frequency_unit)}
                        - if medication.try(:errors).present? && medication.errors[:dosage_frequency_unit].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_frequency_unit].first
            .inline.field.required
                %label Duration
                .fields
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_duration_value].any? )}
                        = m.number_field :dosage_duration_value, placeholder: 'Value', value: medication.try(:dosage_duration_value)
                        - if medication.try(:errors).present? && medication.errors[:dosage_duration_value].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_duration_value].first
                    .field.required{class: ("error" if medication.try(:errors).present? && medication.errors[:dosage_duration_unit].any? )}
                        = m.select :dosage_duration_unit, Medication::DURATION_UNITS, { prompt: "Select Unit..." , selected: medication.try(:dosage_duration_unit) }
                        - if medication.try(:errors).present? && medication.errors[:dosage_duration_unit].any?
                            .ui.red.pointing.above.label.error
                                = medication.errors[:dosage_duration_unit].first
        